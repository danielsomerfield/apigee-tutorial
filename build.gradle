import org.apache.http.auth.AuthScope
import org.apache.http.auth.UsernamePasswordCredentials
import org.apache.http.client.CredentialsProvider
import org.apache.http.client.methods.HttpPost
import org.apache.http.impl.client.BasicCredentialsProvider
import org.apache.http.impl.client.HttpClients

import static BuildUtils.ping
import static BuildUtils.waitUntil

apply plugin: 'groovy'
apply plugin: 'application'
apply plugin: 'maven-publish'

group = "com.danielsomerfield"

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.apache.httpcomponents:httpclient:4.3.6'
    }
}

mainClassName = "helloService.HelloServiceMain"
sourceCompatibility = 1.8
version = generateVersion()

def generateVersion() {
    def versionNumber = '1.0.0'
    def buildName = System.getenv("CI") == 'true' ? System.getenv("SNAP_PIPELINE_COUNTER") : "DEV"
    project.version = "$versionNumber-$buildName"
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.+'
    compile 'org.eclipse.jetty:jetty-http:8.1.+'
    compile 'org.eclipse.jetty:jetty-server:8.1.+'
    testCompile 'org.apache.httpcomponents:httpclient:4.3.+'
    testCompile 'junit:junit:4.+'
}

test {
    exclude '**/*UATest.*'
}

task uat(type: Test, dependsOn: ['test', 'extractDistro']) {
    include '**/*UATest.*'
    doFirst {
        startApp()
        waitForPing()
    }
}
uat.finalizedBy("cleanup")

task cleanup() {
    doFirst {
        stopApp()
    }
}

task pingApp() {
    doFirst {
        def url = "${System.getProperty("HELLO_SERVICE_ROOT") ?: "http://localhost:8080"}/ping/"
        logger.info("Starting app ping to url $url")
        waitUntil(1000 * 60) {
            //TODO: refactor this.
            ping(url)
        }
    }
}

def distroPath = "build/distributions/${project.name}-${project.version}.zip"

task extractDistro(type: Copy, dependsOn: 'distZip') {
    from(zipTree(distroPath))
    into 'build/exploded'
}

def stopApp() {
    if (ext.process != null) {
        logger.info("Killing the app")
        ext.process.destroy()
    }
}

def startApp() {
    logger.info("Starting the app")
    ProcessBuilder builder = new ProcessBuilder("build/exploded/${project.name}-${project.version}/bin/${project.name}")
    builder.inheritIO()
    ext.process = builder.start()
}

def waitForPing() {
    def url = System.getProperty("HELLO_SERVICE_ROOT") ?: "http://localhost:8080";
    waitUntil(5000) {
        if (!ext.process.isAlive()) {
            throw new GradleException("The server process died with return code ${ext.process.exitValue()}")
        }
        ping("$url/ping/")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(distroPath)
        }
    }

    repositories {
        maven {
            url "https://api.bintray.com/maven/danielsomerfield/maven/apigee-tutorial"
            credentials {
                username = System.getenv("BINTRAY_USERNAME")
                password = System.getenv("BINTRAY_PASSWORD")
            }
        }
    }
}

publish {
    doLast {
        def bintrayPublishURL = "https://api.bintray.com/content/danielsomerfield/maven/apigee-tutorial/${version}/publish"

        HttpPost post = new HttpPost(bintrayPublishURL)
        CredentialsProvider credsProvider = new BasicCredentialsProvider();
        credsProvider.setCredentials(
                new AuthScope(null, -1),
                new UsernamePasswordCredentials(
                        System.getenv("BINTRAY_USERNAME"),
                        System.getenv("BINTRAY_PASSWORD")
                )
        );

        HttpClients.custom().setDefaultCredentialsProvider(credsProvider).build().withCloseable { client ->
            client.execute(post).withCloseable() { response ->
                if (response.statusLine.statusCode != 200) {
                    throw new GradleException("Bintray publish receive status code ${response.statusLine.statusCode}.")
                }
            }
        }
    }
}
